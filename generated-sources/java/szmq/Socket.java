package szmq;
import org.bridj.BridJ;
import org.bridj.Pointer;
import org.bridj.ann.Constructor;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.cpp.CPPObject;
/**
 * Send/recv options.<br>
 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:32</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("szmq") 
public class Socket extends CPPObject {
	static {
		BridJ.register();
	}
	/**
	 * Original signature : <code>Socket(int)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:3</i>
	 */
	@Constructor(0) 
	public Socket(int type) {
		super((Void)null, 0, type);
	}
	/**
	 * Original signature : <code>int bindEndpoint(const char*)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:7</i>
	 */
	public int bindEndpoint(Pointer<Byte > endpoint) {
		return bindEndpoint(Pointer.getPeer(endpoint));
	}
	protected native int bindEndpoint(@Ptr long endpoint);
	/**
	 * Original signature : <code>int connectEndpoint(const char*)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:9</i>
	 */
	public int connectEndpoint(Pointer<Byte > endpoint) {
		return connectEndpoint(Pointer.getPeer(endpoint));
	}
	protected native int connectEndpoint(@Ptr long endpoint);
	/**
	 * Original signature : <code>int setSocketOption(int, const char*, int)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:11</i>
	 */
	public int setSocketOption(int option, Pointer<Byte > value, int valueLength) {
		return setSocketOption(option, Pointer.getPeer(value), valueLength);
	}
	protected native int setSocketOption(int option, @Ptr long value, int valueLength);
	/**
	 * Original signature : <code>int curveClient(const char*, const char*)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:13</i>
	 */
	public int curveClient(Pointer<Byte > clientPrivateKey, Pointer<Byte > serverPublicKey) {
		return curveClient(Pointer.getPeer(clientPrivateKey), Pointer.getPeer(serverPublicKey));
	}
	protected native int curveClient(@Ptr long clientPrivateKey, @Ptr long serverPublicKey);
	/**
	 * Original signature : <code>int curveServer(const char*)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:15</i>
	 */
	public int curveServer(Pointer<Byte > serverPrivateKey) {
		return curveServer(Pointer.getPeer(serverPrivateKey));
	}
	protected native int curveServer(@Ptr long serverPrivateKey);
	/**
	 * Original signature : <code>int sendMessage(const char*)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:17</i>
	 */
	public int sendMessage(Pointer<Byte > message) {
		return sendMessage(Pointer.getPeer(message));
	}
	protected native int sendMessage(@Ptr long message);
	/**
	 * Original signature : <code>char* receive(int)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:19</i>
	 */
	public Pointer<Byte > receive(int timeout) {
		return (Pointer)Pointer.pointerToAddress(receive$2(timeout), Byte.class);
	}
	@Ptr 
	@Name("receive") 
	protected native long receive$2(int timeout);
	/**
	 * Original signature : <code>char* getPrivatekey()</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:21</i>
	 */
	public Pointer<Byte > getPrivatekey() {
		return (Pointer)Pointer.pointerToAddress(getPrivatekey$2(), Byte.class);
	}
	@Ptr 
	@Name("getPrivatekey") 
	protected native long getPrivatekey$2();
	/**
	 * Original signature : <code>char* getPublickey(const char*)</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:23</i>
	 */
	public Pointer<Byte > getPublickey(Pointer<Byte > privatekey) {
		return (Pointer)Pointer.pointerToAddress(getPublickey(Pointer.getPeer(privatekey)), Byte.class);
	}
	@Ptr 
	protected native long getPublickey(@Ptr long privatekey);
	/**
	 * Original signature : <code>char* getLastErrorDescription()</code><br>
	 * <i>native declaration : src/main/native/szmq/include/Socket.hpp:25</i>
	 */
	public Pointer<Byte > getLastErrorDescription() {
		return (Pointer)Pointer.pointerToAddress(getLastErrorDescription$2(), Byte.class);
	}
	@Ptr 
	@Name("getLastErrorDescription") 
	protected native long getLastErrorDescription$2();
	/** C type : void* */
	@Field(0) 
	public Pointer<? > ctx() {
		return this.io.getPointerField(this, 0);
	}
	/** C type : void* */
	@Field(0) 
	public Socket ctx(Pointer<? > ctx) {
		this.io.setPointerField(this, 0, ctx);
		return this;
	}
	/** C type : void* */
	@Field(1) 
	public Pointer<? > socket() {
		return this.io.getPointerField(this, 1);
	}
	/** C type : void* */
	@Field(1) 
	public Socket socket(Pointer<? > socket) {
		this.io.setPointerField(this, 1, socket);
		return this;
	}
	public Socket() {
		super();
	}
	public Socket(Pointer pointer) {
		super(pointer);
	}
}
